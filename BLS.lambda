// BLS(design, response, prior_mu, prior_, alpha, beta)
//     """
//     Compute Bayesian Linear Least Squares (BLS) regression with conjugate priors.
// 
//     Bayesian Linear Least Squares is a statistical method that performs linear regression
//     while incorporating prior information about the parameters into the model. It is useful
//     when dealing with small data sets or situations where there is limited knowledge about
//     the true underlying parameters.
// 
//     Parameters:
//     -----------
//     design : array-like, shape (n_samples, n_features)
//              The input feature matrix, where n_samples is the number of samples and n_features
//              is the number of features. It should be a 2-dimensional array-like object.
// 
//     y : array-like, shape (n_samples,)
//         The target values corresponding to each sample in X. It should be a 1-dimensional array-like object.
// 
//     alpha : float or array-like
//         The hyperparameter representing the precision of the prior distribution for the intercept term.
//         If a single float, the prior precision is the same for all intercept terms.
//         If an array-like object of length n_features, it represents different prior precisions for each feature.
// 
//     beta : float
//         The hyperparameter representing the precision of the prior distribution for the noise term.
// 
//     Returns:
//     --------
//     posterior_means : array-like, shape (n_features,)
//         The posterior means of the coefficients for each feature after Bayesian Linear Least Squares.
// 
//     posterior_covariance : array-like, shape (n_features, n_features)
//         The posterior covariance matrix of the coefficient estimates after Bayesian Linear Least Squares.
// 
//     Raises:
//     -------
//     ValueError:
//         If X and y have incompatible shapes.
//         If alpha is not a positive float or an array-like of positive floats.
//         If beta is not a positive float.
// 
//     Notes:
//     ------
//     1. The function assumes that the prior distributions for the intercept and coefficients are Gaussian
//        (conjugate priors). The prior distribution for each coefficient follows a normal distribution with
//        a mean of 0 and a precision defined by the corresponding element of the `alpha` array or the single
//        value of `alpha`.
// 
//     2. The prior distribution for the noise term follows an inverse Gamma distribution with shape and scale
//        parameters derived from the `beta` value.
// 
//     3. The function uses Bayesian updating to compute the posterior distribution of the coefficients based
//        on the given data and the prior information.
// 

= LAMBDA( design, response, prior_mu, prior_precision, LET
  ( REORDER, LAMBDA(beta, LET(nCols, COLUMNS(beta) - 1, INDEX(beta, 1, SEQUENCE(nCols, 1, nCols, -1))))
  , LINSOLVE, LAMBDA(A, b, REORDER(LINEST(b, A, 0, 0)))
  , FORCE2COL, LAMBDA(vector, IF(COLUMNS(vector) > 1, TRANSPOSE(vector), vector))
  , COL2MAT, LAMBDA(vector, LET
    ( nRow, ROWS(vector)
    , MAKEARRAY(nRow, nRow, LAMBDA(iRow, iCol, IF(iRow = iCol, INDEX(vector, iRow, 1), 0)))
    ))
  , rowOrientation, COLUMNS(prior_mu) > 1
  , prior_mu_, FORCE2COL(prior_mu)
  , prior_precision_, IF
    ( OR(ROWS(prior_precision) = 1, COLUMNS(prior_precision) = 1)
    , COL2MAT(FORCE2COL(prior_precision))
    , prior_precision
    )
  , design_rows, ROWS(design)
  , design_cols, COLUMNS(design)
  , response_rows, ROWS(response)
  , response_cols, COLUMNS(response)
  , mu_rows, ROWS(prior_mu_)
  , mu_cols, COLUMNS(prior_mu_)
  , precision_rows, ROWS(prior_precision_)
  , precision_cols, COLUMNS(prior_precision_)
  , nBeta, design_cols
  , IF(NOT(AND
      ( response_rows = design_rows 
      , response_cols = 1
      , mu_rows = nBeta
      , mu_cols = 1
      , precision_cols = nBeta
      , precision_rows = nBeta
      ))
      , INDIRECT("")
      , LET
        ( beta_hat, LINSOLVE(design, response)
        , XTX, MMULT(TRANSPOSE(design), design)
        , posterior_precision, XTX + prior_precision_
        , XTXbetaetc, MMULT(XTX, beta_hat) + MMULT(prior_precision_, prior_mu)
        , posterior_mu, LINSOLVE(posterior_precision, XTXbetaetc)
        , result, HSTACK(posterior_mu, posterior_precision)
        , IF(rowOrientation, TRANSPOSE(result), result)
        ))
))
