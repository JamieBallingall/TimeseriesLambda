// def pacf(timeseries, max_lag=None):
//     """
//     Compute the Partial Autocorrelation Function (PACF) of a given time series.
// 
//     The Partial Autocorrelation Function (PACF) measures the correlation between a time series
//     and its lagged versions, taking into account the intermediate correlations with shorter lags.
// 
//     Parameters:
//     -----------
//     timeseries : list or array-like
//         The input time series for which the PACF will be computed. The time series
//         should be a one-dimensional sequence of numeric values.
// 
//     max_lag : int or None, optional
//         The maximum number of lags for which the PACF will be computed.
//         If set to None (default), the PACF will be computed up to half the length of the time series.
// 
//     Returns:
//     --------
//     pacf_values : list
//         The computed partial autocorrelation values for each lag from 0 to `max_lag`.
//         The PACF at lag 0 is always 1, and the values for other lags represent the correlation
//         between the time series and its lagged versions while accounting for intermediate correlations.
// 
//     Raises:
//     -------
//     ValueError:
//         If the `timeseries` parameter is empty or contains non-numeric elements.
// 
//     Notes:
//     ------
//     1. The function assumes that the input time series is stationary and does not perform any
//        pre-processing or differencing. For non-stationary time series, it is recommended to
//        preprocess the data before computing the PACF.
// 
//     2. The PACF is sensitive to the presence of outliers in the time series. It is recommended
//        to handle outliers or anomalies in the data before computing the PACF.
// 
//     3. If `max_lag` is set to None, the function computes the PACF up to half the length of
//        the time series, which is a common practice to capture meaningful partial correlations.
// 
//     Example:
//     --------
//     >>> ts = [1, 2, 1, 4, 5, 4, 6, 7, 6, 9]
//     >>> pacf_values = pacf(ts, max_lag=5)
//     >>> print(pacf_values)
//     [1.0, 0.5862068965517241, -0.8103448275862069, 0.4137931034482759, 0.12068965517241381, 0.1724137931034483]
// 
//     """
//     # Implementation details of the PACF computation algorithm.
//     # ...
//     pass
// 
=LAMBDA( design, response, [max_lag], LET
  ( max_lag_, IF(ISOMITTED(max_lag), 15, max_lag)
  , nRow, ROWS(response)
  , AUX, LAMBDA( lag, LET
      ( REORDER, LAMBDA(beta, LET(nCols, COLUMNS(beta) - 1, INDEX(beta, 1, SEQUENCE(nCols, 1, nCols, -1))))
      , LINSOLVE, LAMBDA(design_, response_, REORDER(LINEST(response_, design_, 0, 0)))
      , staggered, MAKEARRAY(nRow - lag, lag, LAMBDA(iRow, iCol, INDEX(response, iRow + iCol - 1)))
      , augDesign, IF
        ( lag = 0
        , design
        , HSTACK(DROP(design, lag), staggered)
        )
      , shiftedResponse, DROP(response, lag)
      , beta, LINSOLVE(augDesign, shiftedResponse)
      , resid, shiftedResponse - MMULT(augDesign, beta)
      , CORREL(DROP(resid, 1), DROP(resid, -1))
      )
    )
  , MAP(SEQUENCE(max_lag_ + 1, 1, 0), AUX)
  )
)